<!-- views/profile.ejs -->
<!doctype html>
<html class ="no-js">
<head>
    <title>Node Authentication</title>
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
    <!--Angular JS-->
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
    <!-- Google Maps API -->
    <<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC_Ahm6MSh0ACbjgIB50gcdvnMUkyph6ms&signed_in=true&libraries=places"></script>
    <!--RouteBoxer library-->
    <script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/routeboxer/src/RouteBoxer.js"></script>

    <style>
        body        { padding-top:80px; word-wrap:break-word; }
        #map {
            width: 700px;
            height: 600px;
        }
    </style>
</head>
<body>
<div class="container">

    <div class="page-header text-center">
        <h1><span class="fa fa-anchor"></span> Profile Page</h1>
        <a href="/logout" class="btn btn-default btn-sm">Logout</a>
    </div>

    <div class="row">

        <!-- LOCAL INFORMATION -->
        <div class="col-sm-6">
            <div class="well">
                <h3><span class="fa fa-user"></span> Local</h3>
                <% if(user.local.email) { %>
                    <p>
                        <strong>Logged as:</strong>: <%= user.local.email %><br>
                    </p>
                <% } else { %>
                    <a href="/connect/local" class="btn btn-default">Connect Local</a>
                <% } %>

            </div>
        </div>
        <!-- FACEBOOK INFORMATION -->
        <div class="col-sm-6">
            <div class="well">
                <h3 class="text-primary"><span class="fa fa-facebook"></span> Facebook</h3>
                <!-- check if the user has this token (is the user authenticated with this social account) -->
                <% if (user.facebook.token) { %>
                    <p>
                        <strong>Logged as: </strong>: <%= user.facebook.name %>
                    </p>
                <% } else { %>
                    <a href="/connect/facebook" class="btn btn-primary">Connect Facebook</a>
                <% } %>

            </div>
        </div>
        <div ng-app = "mapsApp" ng-controller="mapCtrl">
            
            <input id="origin-input" placeholder="Enter a start location">
            <input id="destination-input" placeholder="Enter a destination location">
            <label>Radius : </label>
            <input id="radius" placeholder="Enter radius">
            <button ng-click="route()" >Submit</button>
            <div id="mode_selector">
                <input type="radio" name="type" id="changemode-walking" checked = "checked">
                <label for="changemodewalking">Walking</label>

                <input type="radio" name="type" id="changemode-driving">
                <label for="changemodedriving">Driving</label>
            </div>
            <div id = "map"></div>
        </div>
    </div>
    
    
    <script>
//console.log("Maps...");
angular.module('mapsApp',[]).controller('mapCtrl',function($scope){
  
  var origin_place_id = null;
  var destination_place_id = null;
  var routeBoxer = null;
  var boxpolys = null; 

  $scope.map = new google.maps.Map(document.getElementById('map'), {
    mapTypeControl: false,
    zoom: 13
  });

  var infoWindow = new google.maps.InfoWindow({map:$scope.map});
  var travel_mode = google.maps.TravelMode.WALKING;
  
  if(navigator.geolocation){
    navigator.geolocation.getCurrentPosition(function(position){  
      var pos = {
                  lat:position.coords.latitude,
                  lng:position.coords.longitude
                };
      infoWindow.setPosition(pos);
      infoWindow.setContent('You are here!');
      $scope.map.setCenter(pos);
    },function(){
      handleLocationError(true,infoWindow,$scope.map.getCenter());
    });
  }else {
    handleLocationError(false,infoWindow,$scope.map.getCenter());
  }

  function handleLocationError(browserHasGeolocation,infoWindow,pos){
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation?
                          'Error : The Geolocation service failed.':
                          'Error : Your browser does not support geolocation.');
  }
  routeBoxer = new RouteBoxer();
  var directionsService = new google.maps.DirectionsService;
  var directionsDisplay = new google.maps.DirectionsRenderer({map:$scope.map});
  //directionsDisplay.setMap($scope.map);

  var origin_input = document.getElementById('origin-input');
  var destination_input = document.getElementById('destination-input');
  var modes = document.getElementById('mode-selector');

  /*$scope.map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
  $scope.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
  $scope.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);*/

  var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
  origin_autocomplete.bindTo('bounds', $scope.map);
  var destination_autocomplete =
      new google.maps.places.Autocomplete(destination_input);
  destination_autocomplete.bindTo('bounds', $scope.map);

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, mode) {
    var radioButton = document.getElementById(id);
    radioButton.addEventListener('click', function() {
      travel_mode = mode;
    });
  }

  setupClickListener('changemode-walking', google.maps.TravelMode.WALKING);
  setupClickListener('changemode-driving', google.maps.TravelMode.DRIVING);

  function expandViewportToFitPlace(map, place) {
    if (place.geometry.viewport) {
     $scope.map.fitBounds(place.geometry.viewport);
    } else {
     $scope.map.setCenter(place.geometry.location);
     $scope.map.setZoom(17);
    }
  }

  origin_autocomplete.addListener('place_changed', function() {
    var place = origin_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    origin_place_id = place.place_id;
    /*route(origin_place_id, destination_place_id, travel_mode,
          directionsService, directionsDisplay);*/
  });

  destination_autocomplete.addListener('place_changed', function() {
    var place = destination_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace($scope.map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    destination_place_id = place.place_id;
    /*route(origin_place_id, destination_place_id, travel_mode,
          directionsService, directionsDisplay);*/
  });

  $scope.route = function(){

    clearBoxes();

    if(!origin_place_id || !destination_place_id ){
      return;
    }
    var distance_radius = parseFloat(document.getElementById('radius').value);
    directionsService.route({
      origin : {'placeId':origin_place_id},
      destination : {'placeId':destination_place_id},
      travelMode : travel_mode
    },function(response,status){
      if(status === google.maps.DirectionsStatus.OK){
        directionsDisplay.setDirections(response);
        var path = response.routes[0].overview_path;
        var boxes = routeBoxer.box(path,distance_radius);
        drawBoxes(boxes);
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  };
  function drawBoxes(boxes){
    boxpolys = new Array(boxes.length);
    for (var i = 0; i < boxes.length; i++) {
        boxpolys[i] = new google.maps.Rectangle({
          bounds: boxes[i],
          fillOpacity: 0,
          strokeOpacity: 1.0,
          strokeColor: '#000000',
          strokeWeight: 1,
          map: $scope.map
        });
      }
  }
  // Clear boxes currently on the map
  function clearBoxes() {
      if (boxpolys != null) {
        for (var i = 0; i < boxpolys.length; i++) {
          boxpolys[i].setMap(null);
        }
      }
      boxpolys = null;
    }
});
    </script>
</div>
    
</body>
</html>